/*!
 * Backbone.GoogleMaps
 * A Backbone JS layer for the GoogleMaps API
 * Copyright (c)2012 Edan Schwartz
 * Distributed under MIT license
 * https://github.com/eschwartz/backbone.googlemaps
 */
Backbone.GoogleMaps=function(e,t,i){"use strict";var s={};return s.Location=e.Model.extend({constructor:function(){t.bindAll(this,"select","deselect","toggleSelect","getLatlng"),this.defaults=t.extend({},{lat:0,lng:0,selected:!1,title:""},this.defaults),e.Model.prototype.constructor.apply(this,arguments)},select:function(){this.get("selected")||(this.set("selected",!0),this.trigger("selected",this),e.Events.trigger("location:selected",this))},deselect:function(){this.get("selected")&&(this.set("selected",!1),this.trigger("deselected",this),e.Events.trigger("location:deselected",this))},toggleSelect:function(){this.get("selected")?this.deselect():this.select()},getLatlng:function(){return new google.maps.LatLng(this.get("lat"),this.get("lng"))}}),s.LocationCollection=e.Collection.extend({model:s.Location,constructor:function(){e.Collection.prototype.constructor.apply(this,arguments),e.Events.on("location:selected",function(e){this.each(function(t){e.cid!==t.cid&&t.deselect()})},this)}}),s.MapView=e.View.extend({mapEvents:{},overlayOptions:{},constructor:function(){if(t.bindAll(this),e.View.prototype.constructor.apply(this,arguments),!google||!google.maps)throw new Error("Google maps API is not loaded.");if(!this.options.map&&!this.map)throw new Error("A map must be specified.");this.gOverlay=this.map=this.options.map||this.map,this.overlayOptions||(this.overlayOptions=this.options.overlayOptions)},bindMapEvents:function(e){e||(e=this.mapEvents);var t;for(t in e){var i=e[t];google.maps.event.addListener(this.gOverlay,t,this[i])}},render:function(){return this.beforeRender&&this.beforeRender(),this.bindMapEvents(),this.onRender&&this.onRender(),this},close:function(){this.beforeClose&&this.beforeClose(),google.maps.event.clearInstanceListeners(this.gOverlay),this.gOverlay.setMap&&this.gOverlay.setMap(null),this.gOverlay=null,this.onClose&&this.onClose()}}),s.InfoWindow=s.MapView.extend({constructor:function(){if(s.MapView.prototype.constructor.apply(this,arguments),t.bindAll(this,"render","close"),!this.options.marker&&!this.marker)throw new Error("A marker must be specified for InfoWindow view.");this.marker=this.options.marker||this.marker,this.template=this.template||this.options.template},render:function(){this.beforeRender&&this.beforeRender(),s.MapView.prototype.render.apply(this,arguments);var e=this.template?i(this.template).html():"<h2><%=title %></h2>";return this.$el.html(t.template(e,this.model.toJSON())),this.gOverlay=new google.maps.InfoWindow(t.extend({content:this.$el[0]},this.overlayOptions)),this.gOverlay.open(this.map,this.marker),this.onRender&&this.onRender(),this},close:function(){return this.beforeClose&&this.beforeClose(),s.MapView.prototype.close.apply(this,arguments),this.onClose&&this.onClose(),this}}),s.MarkerView=s.MapView.extend({infoWindow:s.InfoWindow,constructor:function(){if(s.MapView.prototype.constructor.apply(this,arguments),t.bindAll(this,"render","close","openDetail","closeDetail","toggleSelect"),!this.model)throw new Error("A model must be specified for a MarkerView");this.gOverlay=new google.maps.Marker(t.extend({position:this.model.getLatlng(),map:this.map,title:this.model.title,animation:google.maps.Animation.DROP,visible:!1},this.overlayOptions)),t.extend(this.mapEvents,{click:"toggleSelect"}),this.model.on("selected",this.openDetail,this),this.model.on("deselected",this.closeDetail,this),this.model.on("change:lat change:lng",this.refreshOverlay,this),this.bindMapEvents({position_changed:"updateModelPosition"})},refreshOverlay:function(){this.model.getLatlng().equals(this.gOverlay.getPosition())||this.gOverlay.setOptions({position:this.model.getLatlng()})},updateModelPosition:function(){var e=this.gOverlay.getPosition();this.model.getLatlng().equals(e)||this.model.set({lat:e.lat(),lng:e.lng()})},toggleSelect:function(){this.model.toggleSelect()},render:function(){return this.beforeRender&&this.beforeRender(),s.MapView.prototype.render.apply(this,arguments),this.gOverlay.setVisible(!0),this.onRender&&this.onRender(),this},close:function(){return this.beforeClose&&this.beforeClose(),this.closeDetail(),s.MapView.prototype.close.apply(this,arguments),this.model.off(),this.onClose&&this.onClose(),this},openDetail:function(){this.detailView=new this.infoWindow({model:this.model,map:this.map,marker:this.gOverlay}),this.detailView.render()},closeDetail:function(){this.detailView&&(this.detailView.close(),this.detailView=null)}}),s.MarkerCollectionView=e.View.extend({markerView:s.MarkerView,markerViewChildren:{},constructor:function(){if(e.View.prototype.constructor.apply(this,arguments),t.bindAll(this,"render","closeChildren","closeChild","addChild","refresh","close"),!this.options.map&&!this.map)throw new Error("A map must be specified on MarkerCollectionView instantiation");this.map||(this.map=this.options.map),this.collection.on("reset",this.refresh,this),this.collection.on("add",this.addChild,this),this.collection.on("remove",this.closeChild,this)},render:function(e){var e=e||this.collection;return this.beforeRender&&this.beforeRender(),e.each(this.addChild),this.onRender&&this.onRender(),this},closeChildren:function(){var e;for(e in this.markerViewChildren)this.closeChild(this.markerViewChildren[e])},closeChild:function(t){var i=t instanceof e.Model?this.markerViewChildren[t.cid]:t;i.close(),delete this.markerViewChildren[i.model.cid]},addChild:function(e){var t=new this.markerView({model:e,map:this.map});this.markerViewChildren[e.cid]=t,t.render()},refresh:function(){this.closeChildren(),this.render()},close:function(){this.closeChildren(),this.collection.off()}}),s}(Backbone,_,window.jQuery||window.Zepto||window.ender);